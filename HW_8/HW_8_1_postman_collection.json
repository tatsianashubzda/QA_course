{
	"info": {
		"_postman_id": "159c2c58-e291-4e55-8557-89c4983de817",
		"name": "HW_8 *",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "A1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"A1_Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/* 1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
							"Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"Требования:\r",
							"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное */\r",
							"\r",
							"let req = (request.data);\r",
							"console.log(req);\r",
							"//Check nameField\r",
							"let checkNameF = function (name) {\r",
							"        if (name.length >= 3 && name.length <= 40) {\r",
							"        if (name[0] != \" \" && name[name.length - 1] != \" \") { return true } else { return false }\r",
							"    }\r",
							"    return false;\r",
							"};\r",
							"\r",
							"//Check ageField\r",
							"let checkAgeF = function (age) {\r",
							"    if (age >= 18 && age <= 120) {\r",
							"        if (age % 1 == 0) { return true } else { return false }\r",
							"    }\r",
							"    return false;\r",
							"}\r",
							"\r",
							"//Check salaryField\r",
							"let checkSalaryF = function (salary) {\r",
							"    if (salary >= 1 && salary <= 1000000) {\r",
							"        if (salary % 1 == 0) { return true } else { return false }\r",
							"    }\r",
							"    return false;\r",
							"}\r",
							"pm.test(\"Name is OK\", function () { if (checkNameF(req.name)==false)\r",
							"    pm.response.to.have.status(2) \r",
							"})\r",
							"\r",
							"pm.test(\"Age is OK\", function () { if (checkAgeF(req.age)==false)\r",
							"    pm.response.to.have.status(2) \r",
							"})\r",
							"\r",
							"pm.test(\"Salary is OK\", function () { if (checkSalaryF(req.salary)==false)\r",
							"    pm.response.to.have.status(2) \r",
							"})\r",
							"\r",
							"pm.test(\"Fields are OK\", function () { if (checkSalaryF(req.salary)==false || checkAgeF(req.age)==false ||  checkNameF(req.name)==false)\r",
							"    pm.response.to.have.status(2) \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lids Vbh",
							"type": "text"
						},
						{
							"key": "age",
							"value": " 55",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}