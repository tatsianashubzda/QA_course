{
	"info": {
		"_postman_id": "1958cea5-8105-484f-810f-468e621753a5",
		"name": "HW_8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "R1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "R2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//200 OK\r",
							"pm.test(\"R2_Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"R2_chek_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Di\");\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"R2_chek_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"44\");\r",
							"});\r",
							"\r",
							" //  Проверить, что salary в ответе равно salary s request (salary вбить руками.)   \r",
							"pm.test(\"R2_chek_salary\", function () {\r",
							"   pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//  Спарсить request.\r",
							"let req = (request.data);\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"R2_chek_nameIn==nameOut\", function () {\r",
							"   pm.expect(req.name).to.eql(jsonData.name);\r",
							" });\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"R2_chek_ageIn==ageOut\", function () {\r",
							"   pm.expect(req.age).to.eql(jsonData.age);\r",
							" });\r",
							"\r",
							"//  Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"R2_chek_salaryIn==salaryOut\", function () {\r",
							"   pm.expect(+req.salary).to.eql(jsonData.salary);\r",
							" });\r",
							"\r",
							"//  Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"R2_chek_salary_1_5_year==salary*4\", function () {\r",
							"   pm.expect(+req.salary*4).to.eql(jsonData.family.u_salary_1_5_year);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Di",
							"type": "text"
						},
						{
							"key": "age",
							"value": "44",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "R3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//200 OK\r",
							"pm.test(\"R3_Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"//  Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"console.log(req);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"R3_chek_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"R3_chek_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(pm.request.url.query.get(\"age\"));\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"R3_chek_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req[2].value);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"R3_chek_dog_have_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"R3_chek_dog_have_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"R3_chek_dog_name_is_Lucky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"R3_chek_dog_age_is_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Di",
							"type": "text"
						},
						{
							"key": "age",
							"value": "44",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Di&age=44&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Di"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "R4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"R4_Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"//  Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"console.log(req);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"R4_chek_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"R4_chek_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req[1].value);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"console.log(req[2]);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"R4_chek_salary0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+pm.request.url.query.get(\"salary\"));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"R4_chek_salary1\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(pm.request.url.query.get(\"salary\")*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"R4_chek_salary2\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(pm.request.url.query.get(\"salary\")*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Di\");\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"44\");\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i=0; i<=2; i++) console.log (jsonData.salary[i])\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Di&age=44&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Di"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "R5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"R5_Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"//Спарсить request\r",
							"let req = (request.data);\r",
							"console.log(req)\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"R5_check to have start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"R5_check to have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"R5_check to have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"R5_chek to have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"R5_chek to have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"R5_chek to have person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"R5 start_qa_salary == req.salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"R5 qa_salary_after_6_months == req.salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"R5 qa_salary_after_12_months == req.salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"R5 qa_salary_after_1.5_year == req.salary*3.3\", function () {\r",
							"    pm.expect( jsonData[\"qa_salary_after_1.5_year\"] ).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"R5 qa_salary_after_3.5_years == req.salary\", function () {\r",
							"    pm.expect( jsonData[\"qa_salary_after_3.5_years\"] ).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] == req.salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age == req.age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years == req.salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let personKeys = Object.keys(jsonData.person);\r",
							"let personValues = Object.values(jsonData.person);\r",
							"for (let i=0; i<personKeys.length; i++) console.log (personKeys[i]+ ' : '+personValues[i])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token;\r",
							"\r",
							"pm.environment.set(\"token\", user_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}